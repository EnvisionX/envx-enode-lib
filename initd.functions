#!/bin/sh

##
## Skeleton for the Erlang Node daemon.
##
## Mandatory variables:
##  DESC - short daemon description
##  BASENAME - short daemon name
##


PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=envx_$BASENAME
SCRIPTNAME=/etc/init.d/envx-$BASENAME

RETVAL=0
DAEMON=/usr/lib/envx/$BASENAME
PIDFILE=/var/lib/envx-$BASENAME/pid
COOKIEFILE=/var/lib/envx-$BASENAME/.erlang.cookie

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

create_cookie_file(){
    [ -f "$COOKIEFILE" ] || \
        cat /dev/urandom | tr -dc a-zA-Z0-9 | head -c 20 > "$COOKIEFILE"
    chown -R $NAME: "$COOKIEFILE"
    chmod 400 "$COOKIEFILE"
}

do_start(){
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    create_cookie_file
    start-stop-daemon --quiet --pidfile=$PIDFILE --user=$NAME \
        --startas $DAEMON --background --chuid=$NAME \
        --start > /dev/null
    case "$?" in
        1) return 1 ;;
        2) return 2 ;;
    esac
    # Not so pretty but:
    #  1. without status check we cannot be sure the daemon was started;
    #  2. immediately check sometimes report "not running"
    sleep 0.5
    do_status && return 0 || return 2
}

do_status(){
    # Return
    #   0 if program is running.
    #   1 if program is not running and the pid file exists.
    #   3 if program is not running.
    #   4 unable to determine program status.
    start-stop-daemon --quiet --pidfile=$PIDFILE --user=$NAME \
        --status > /dev/null
}

do_stop(){
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --quiet --pidfile=$PIDFILE --user=$NAME \
        --retry=TERM/5/KILL/2 \
        --stop > /dev/null
    case "$?" in
        0)
            do_status
            case "$?" in
                0) return 2 ;;
                4) return 4 ;;
            esac
            ;;
        1) return 1 ;;
        2) return 2 ;;
    esac
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return 0
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        do_status
        RETVAL=$?
        case "$RETVAL" in
            0) log_success_msg "$NAME is running" ;;
            4) log_failure_msg "unable to get status for $NAME" ;;
            *) log_failure_msg "$NAME is not running" ;;
        esac
        return $RETVAL
        ;;
    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *) log_end_msg 1 ;;
        esac
        ;;
    remsh)
        su -s /bin/sh -c "$DAEMON remsh" $NAME
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|remsh}" >&2
        exit 3
        ;;
esac

:
